use crate::editor::EditorSpace;
use key_functions::{down_arrow, up_arrow};
use rayon::iter::{IntoParallelIterator, ParallelExtend, ParallelIterator};

use super::*;

/*
====================================
            Blocks Tests
====================================
*/

// Test that initializing a Blocks struct correctly loads in the first block
#[test]
fn blocks_create_test() {
	// Editor that will load in one block from the `GRCh38_50_rna` file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 500, 500);

	// Create a string from the content of the first block
	let content: Vec<String> = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
    // The text that gets loaded in
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

    // This should be the first block of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME);

	// Check that these blocks are the same
	assert_eq!(actual_text, expected_text);
    assert_eq!(editor.blocks.as_ref().unwrap().blocks_list[0].ends_with_newline, false);
}

// Test the insert_tail function to add a new block to the Blocks
#[test]
fn insert_tail_test() {
	// Create an editor over the genome file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
	// Initialize the editor
	let _ = editor.init_editor((0, 0), 500, 500);
	// Clone the blocks
	let mut blocks = editor.blocks.as_ref().unwrap().clone();
	// Insert a block into the new blocks
	let _ = blocks.insert_tail(&mut editor);
	// Set the blocks to the new copy
	editor.blocks = Some(blocks);

	// Create a vector of all the lines in the first two blocks
	let mut content = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
	content.extend(
		editor.blocks.as_ref().unwrap().blocks_list[1]
			.content
			.clone(),
	);
	// Convert this vector of lines to a string
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

    // This should be the first two blocks of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME) + SECOND_BLOCK_GENOME;

	// Compare the actual string to the expected
	assert_eq!(actual_text, expected_text);
}

// Test the insert_head function to add a new block at the beginning of the Blocks struct
#[test]
fn insert_head_test() {
	// Create an editor over the genome file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
	// Create a new Blocks struct starting at the second block of the file
	let blocks = Blocks::new(&mut editor, 1).unwrap();
	editor.blocks = Some(blocks);
	// Create a copy of the Blocks
	let mut blocks = editor.blocks.as_ref().unwrap().clone();
	// Insert a new block at the front of the Blocks
	let _ = blocks.insert_head(&mut editor);
	// Set this copy as the new editor Blocks
	editor.blocks = Some(blocks);

	// Create a vector of all the lines in the first two blocks
	let mut content = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
	content.extend(
		editor.blocks.as_ref().unwrap().blocks_list[1]
			.content
			.clone(),
	);
	// Convert this vector of lines to a string
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

    // This should be the first two blocks of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME) + SECOND_BLOCK_GENOME;

	// Compare the actual string to the expected
	assert_eq!(actual_text, expected_text);
}

// Test creating a block using a small file
#[test]
fn small_file_block_test() {
	// Create an editor over the small file
	let mut editor = EditorSpace::new(String::from(SMALL_FILE));
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 500, 500);

	// Create a string from the content of the single block
	let content: Vec<String> = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
	let mut actual_text = String::new();
	actual_text.extend(content.into_iter().map(|line| line));

	// The expected contents of the small block
	let expected_text = String::from(
		"#include<stdio.h> ðŸ¥¹ðŸ‡ºðŸ‡¸ðŸ‡³ðŸ‡´\
        \
        void test_func() {\
        \tprintf(\"Testing the save feature\\n\");\
        }\
        \
        int main() {\
        \tprintf(\"I've almost done it!\\n\");\
        \ttest_func();\
        \
        \treturn 0;\
        }\
        ",
	);

	// Check that the expected equals the actual
	assert_eq!(actual_text, expected_text);
}

// Test that pressing down arrow past the end of the current block loads a new tail block
#[test]
fn down_arrow_block_load() {
    // Create an editor over the genome file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
    // Create a default config
    let config = Config::default();
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 50, 50);

    /* Down arrow into the next block (current block is 63 lines long).
    This should cause a second block to be loaded into the Blocks struct. */
    for _i in 0..70 {
        down_arrow(&mut editor, &config);
    }

    // This should be the first two blocks of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME) + SECOND_BLOCK_GENOME;

	// Create a vector of all the lines in the first two blocks
	let mut content = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
	content.extend(
		editor.blocks.as_ref().unwrap().blocks_list[1]
			.content
			.clone(),
	);
	// Convert this vector of lines to a string
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

	// Compare the actual string to the expected
	assert_eq!(actual_text, expected_text);
}

// Test that pressing the up arrow before the beginning of the head block will load a new head
#[test]
fn up_arrow_block_load() {
    // Create an editor over the genome file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
    // Create a config
    let config = Config::default();
    // Initialize the block (among other things)
    let _ = editor.init_editor((0, 0), 50, 50);
	// Create a new Blocks struct starting at the second block of the file
	let blocks = Blocks::new(&mut editor, 1).unwrap();
	editor.blocks = Some(blocks);
    editor.scroll_offset = 63;

    /* Up Arrow into the previous block.
    This should load a new head block. */
    for _i in 0..5 {
        up_arrow(&mut editor, &config);
    }

    // This should be the first two blocks of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME) + SECOND_BLOCK_GENOME;

	// Create a vector of all the lines in the first two blocks
	let mut content = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
	content.extend(
		editor.blocks.as_ref().unwrap().blocks_list[1]
			.content
			.clone(),
	);
	// Convert this vector of lines to a string
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

	// Compare the actual string to the expected
	assert_eq!(actual_text, expected_text);
}

// Test that multiple blocks can be loaded in succession from the down arrow
#[test]
fn repeated_load_down() {
    // Create an editor over the genome file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
    // Create a default config
    let config = Config::default();
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 50, 50);

    /* Down arrow through multiple blocks. */
    for _i in 0..140 {
        down_arrow(&mut editor, &config);
    }

    // This should be the first two blocks of this file
	let expected_text = String::from(FIRST_BLOCK_GENOME) + SECOND_BLOCK_GENOME + THIRD_GENOME_BLOCK;

	// Create a vector of all the lines in the first three blocks
	let mut content = editor.blocks.as_ref().unwrap().blocks_list[0]
		.content
		.clone();
    for i in 1..3 {
        content.extend(
            editor.blocks.as_ref().unwrap().blocks_list[i]
                .content
                .clone(),
        );
    }
	// Convert this vector of lines to a string
	let mut actual_text = String::new();
	actual_text.par_extend(content.into_par_iter().map(|line| line));

	// Compare the actual string to the expected
	assert_eq!(actual_text, expected_text);
}

// Test that the ends_with_newline_flag is being set properly
#[test]
fn newline_test() {
    // Editor that will load in one block from the genome file
	let mut editor = EditorSpace::new(String::from(NEWLINE_FILE));
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 500, 500);

    // Check the newline flag
    let block = editor.blocks.as_ref().unwrap().blocks_list[0].clone();
    assert!(block.ends_with_newline);
}

// Test that the length of Blocks struct is correct
#[test]
fn block_length() {
    // Editor that will load in one block from the `GRCh38_50_rna` file
	let mut editor = EditorSpace::new(String::from(GENOME_FILE));
	// Initialize the block (among other things)
	let _ = editor.init_editor((0, 0), 500, 500);

    // The calculated length of the Blocks
    let actual_length = editor.blocks.as_ref().unwrap().len();
    // What the length should be (for the first block of GENOME_FILE)
    let expected_length = 63;
    // Check that actual = expected
    assert_eq!(actual_length, expected_length);

    // Push a block to the tail
    let mut blocks = editor.blocks.as_ref().unwrap().clone();
    let _ = blocks.insert_tail(&mut editor);
    editor.blocks = Some(blocks);

    // The calculated length of the Blocks
    let actual_length = editor.blocks.as_ref().unwrap().len();
    // What the length should be (for the first two blocks of GENOME_FILE)
    let expected_length = 127;
    // Check that actual = expected
    assert_eq!(actual_length, expected_length);

    // Push a block to the tail
    let mut blocks = editor.blocks.as_ref().unwrap().clone();
    let _ = blocks.insert_tail(&mut editor);
    editor.blocks = Some(blocks);

    // The calculated length of the Blocks
    let actual_length = editor.blocks.as_ref().unwrap().len();
    // What the length should be (for the first two blocks of GENOME_FILE)
    let expected_length = 191;
    // Check that actual = expected
    assert_eq!(actual_length, expected_length);
}


/*
========================================
            Blocks Constants
========================================
*/

// Small file with very little text
const SMALL_FILE: &str = "../editor/test_files/small_text.txt";

// Large file of part of the human genome
const GENOME_FILE: &str = "../editor/test_files/GRCh38_50_rna.fna";

// File where the first 5KiB block ends in a newline
const NEWLINE_FILE: &str = "../editor/test_files/ends_with_newline.txt";

// The first block of the genome file
const FIRST_BLOCK_GENOME: &str =
	">NM_000014.6 Homo sapiens alpha-2-macroglobulin (A2M), transcript variant 1, mRNA\
    GGGACCAGATGGATTGTAGGGAGTAGGGTACAATACAGTCTGTTCTCCTCCAGCTCCTTCTTTCTGCAACATGGGGAAGA\
    ACAAACTCCTTCATCCAAGTCTGGTTCTTCTCCTCTTGGTCCTCCTGCCCACAGACGCCTCAGTCTCTGGAAAACCGCAG\
    TATATGGTTCTGGTCCCCTCCCTGCTCCACACTGAGACCACTGAGAAGGGCTGTGTCCTTCTGAGCTACCTGAATGAGAC\
    AGTGACTGTAAGTGCTTCCTTGGAGTCTGTCAGGGGAAACAGGAGCCTCTTCACTGACCTGGAGGCGGAGAATGACGTAC\
    TCCACTGTGTCGCCTTCGCTGTCCCAAAGTCTTCATCCAATGAGGAGGTAATGTTCCTCACTGTCCAAGTGAAAGGACCA\
    ACCCAAGAATTTAAGAAGCGGACCACAGTGATGGTTAAGAACGAGGACAGTCTGGTCTTTGTCCAGACAGACAAATCAAT\
    CTACAAACCAGGGCAGACAGTGAAATTTCGTGTTGTCTCCATGGATGAAAACTTTCACCCCCTGAATGAGTTGATTCCAC\
    TAGTATACATTCAGGATCCCAAAGGAAATCGCATCGCACAATGGCAGAGTTTCCAGTTAGAGGGTGGCCTCAAGCAATTT\
    TCTTTTCCCCTCTCATCAGAGCCCTTCCAGGGCTCCTACAAGGTGGTGGTACAGAAGAAATCAGGTGGAAGGACAGAGCA\
    CCCTTTCACCGTGGAGGAATTTGTTCTTCCCAAGTTTGAAGTACAAGTAACAGTGCCAAAGATAATCACCATCTTGGAAG\
    AAGAGATGAATGTATCAGTGTGTGGCCTATACACATATGGGAAGCCTGTCCCTGGACATGTGACTGTGAGCATTTGCAGA\
    AAGTATAGTGACGCTTCCGACTGCCACGGTGAAGATTCACAGGCTTTCTGTGAGAAATTCAGTGGACAGCTAAACAGCCA\
    TGGCTGCTTCTATCAGCAAGTAAAAACCAAGGTCTTCCAGCTGAAGAGGAAGGAGTATGAAATGAAACTTCACACTGAGG\
    CCCAGATCCAAGAAGAAGGAACAGTGGTGGAATTGACTGGAAGGCAGTCCAGTGAAATCACAAGAACCATAACCAAACTC\
    TCATTTGTGAAAGTGGACTCACACTTTCGACAGGGAATTCCCTTCTTTGGGCAGGTGCGCCTAGTAGATGGGAAAGGCGT\
    CCCTATACCAAATAAAGTCATATTCATCAGAGGAAATGAAGCAAACTATTACTCCAATGCTACCACGGATGAGCATGGCC\
    TTGTACAGTTCTCTATCAACACCACCAATGTTATGGGTACCTCTCTTACTGTTAGGGTCAATTACAAGGATCGTAGTCCC\
    TGTTACGGCTACCAGTGGGTGTCAGAAGAACACGAAGAGGCACATCACACTGCTTATCTTGTGTTCTCCCCAAGCAAGAG\
    CTTTGTCCACCTTGAGCCCATGTCTCATGAACTACCCTGTGGCCATACTCAGACAGTCCAGGCACATTATATTCTGAATG\
    GAGGCACCCTGCTGGGGCTGAAGAAGCTCTCCTTCTATTATCTGATAATGGCAAAGGGAGGCATTGTCCGAACTGGGACT\
    CATGGACTGCTTGTGAAGCAGGAAGACATGAAGGGCCATTTTTCCATCTCAATCCCTGTGAAGTCAGACATTGCTCCTGT\
    CGCTCGGTTGCTCATCTATGCTGTTTTACCTACCGGGGACGTGATTGGGGATTCTGCAAAATATGATGTTGAAAATTGTC\
    TGGCCAACAAGGTGGATTTGAGCTTCAGCCCATCACAAAGTCTCCCAGCCTCACACGCCCACCTGCGAGTCACAGCGGCT\
    CCTCAGTCCGTCTGCGCCCTCCGTGCTGTGGACCAAAGCGTGCTGCTCATGAAGCCTGATGCTGAGCTCTCGGCGTCCTC\
    GGTTTACAACCTGCTACCAGAAAAGGACCTCACTGGCTTCCCTGGGCCTTTGAATGACCAGGACAATGAAGACTGCATCA\
    ATCGTCATAATGTCTATATTAATGGAATCACATATACTCCAGTATCAAGTACAAATGAAAAGGATATGTACAGCTTCCTA\
    GAGGACATGGGCTTAAAGGCATTCACCAACTCAAAGATTCGTAAACCCAAAATGTGTCCACAGCTTCAACAGTATGAAAT\
    GCATGGACCTGAAGGTCTACGTGTAGGTTTTTATGAGTCAGATGTAATGGGAAGAGGCCATGCACGCCTGGTGCATGTTG\
    AAGAGCCTCACACGGAGACCGTACGAAAGTACTTCCCTGAGACATGGATCTGGGATTTGGTGGTGGTAAACTCAGCAGGT\
    GTGGCTGAGGTAGGAGTAACAGTCCCTGACACCATCACCGAGTGGAAGGCAGGGGCCTTCTGCCTGTCTGAAGATGCTGG\
    ACTTGGTATCTCTTCCACTGCCTCTCTCCGAGCCTTCCAGCCCTTCTTTGTGGAGCTCACAATGCCTTACTCTGTGATTC\
    GTGGAGAGGCCTTCACACTCAAGGCCACGGTCCTAAACTACCTTCCCAAATGCATCCGGGTCAGTGTGCAGCTGGAAGCC\
    TCTCCCGCCTTCCTAGCTGTCCCAGTGGAGAAGGAACAAGCGCCTCACTGCATCTGTGCAAACGGGCGGCAAACTGTGTC\
    CTGGGCAGTAACCCCAAAGTCATTAGGAAATGTGAATTTCACTGTGAGCGCAGAGGCACTAGAGTCTCAAGAGCTGTGTG\
    GGACTGAGGTGCCTTCAGTTCCTGAACACGGAAGGAAAGACACAGTCATCAAGCCTCTGTTGGTTGAACCTGAAGGACTA\
    GAGAAGGAAACAACATTCAACTCCCTACTTTGTCCATCAGGTGGTGAGGTTTCTGAAGAATTATCCCTGAAACTGCCACC\
    AAATGTGGTAGAAGAATCTGCCCGAGCTTCTGTCTCAGTTTTGGGAGACATATTAGGCTCTGCCATGCAAAACACACAAA\
    ATCTTCTCCAGATGCCCTATGGCTGTGGAGAGCAGAATATGGTCCTCTTTGCTCCTAACATCTATGTACTGGATTATCTA\
    AATGAAACACAGCAGCTTACTCCAGAGATCAAGTCCAAGGCCATTGGCTATCTCAACACTGGTTACCAGAGACAGTTGAA\
    CTACAAACACTATGATGGCTCCTACAGCACCTTTGGGGAGCGATATGGCAGGAACCAGGGCAACACCTGGCTCACAGCCT\
    TTGTTCTGAAGACTTTTGCCCAAGCTCGAGCCTACATCTTCATCGATGAAGCACACATTACCCAAGCCCTCATATGGCTC\
    TCCCAGAGGCAGAAGGACAATGGCTGTTTCAGGAGCTCTGGGTCACTGCTCAACAATGCCATAAAGGGAGGAGTAGAAGA\
    TGAAGTGACCCTCTCCGCCTATATCACCATCGCCCTTCTGGAGATTCCTCTCACAGTCACTCACCCTGTTGTCCGCAATG\
    CCCTGTTTTGCCTGGAGTCAGCCTGGAAGACAGCACAAGAAGGGGACCATGGCAGCCATGTATATACCAAAGCACTGCTG\
    GCCTATGCTTTTGCCCTGGCAGGTAACCAGGACAAGAGGAAGGAAGTACTCAAGTCACTTAATGAGGAAGCTGTGAAGAA\
    AGACAACTCTGTCCATTGGGAGCGCCCTCAGAAACCCAAGGCACCAGTGGGGCATTTTTACGAACCCCAGGCTCCCTCTG\
    CTGAGGTGGAGATGACATCCTATGTGCTCCTCGCTTATCTCACGGCCCAGCCAGCCCCAACCTCGGAGGACCTGACCTCT\
    GCAACCAACATCGTGAAGTGGATCACGAAGCAGCAGAATGCCCAGGGCGGTTTCTCCTCCACCCAGGACACAGTGGTGGC\
    TCTCCATGCTCTGTCCAAATATGGAGCAGCCACATTTACCAGGACTGGGAAGGCTGCACAGGTGACTATCCAGTCTTCAG\
    GGACATTTTCCAGCAAATTCCAAGTGGACAACAACAACCGCCTGTTACTGCAGCAGGTCTCATTGCCAGAGCTGCCTGGG\
    GAATACAGCATGAAAGTGACAGGAGAAGGATGTGTCTACCTCCAGACATCCTTGAAATACAATATTCTCCCAGAAAAGGA\
    AGAGTTCCCCTTTGCTTTAGGAGTGCAGACTCTGCCTCAAACTTGTGATGAACCCAAAGCCCACACCAGCTTCCAAATCT\
    CCCTAAGTGTCAGTTACACAGGGAGCCGCTCTGCCTCCAACATGGCGATCGTTGATGTGAAGATGGTCTCTGGCTTCATT\
    CCCCTGAAGCCAACAGTGAAAATGCTTGAAAGATCTAACCATGTGAGCCGGACAGAAGTCAGCAGCAACCATGTCTTGAT\
    TTACCTTGATAAGGTGTCAAATCAGACACTGAGCTTGTTCTTCACGGTTCTGCAAGATGTCCCAGTAAGAGATCTGAAAC\
    CAGCCATAGTGAAAGTCTATGATTACTACGAGACGGATGAGTTTGCAATTGCTGAGTACAATGCTCCTTGCAGCAAAGAT\
    CTTGGAAATGCTTGAAGACCACAAGGCTGAAAAGTGCTTTGCTGGAGTCCTGTTCTCAGAGCTCCACAGAAGACACGTGT\
    TTTTGTATCTTTAAAGACTTGATGAATAAACACTTTTTCTGGTCAATGTC\
    >NM_000015.3 Homo sapiens N-acetyltransferase 2 (NAT2), mRNA\
    ACTTTATTACAGACCTTGGAAGCAAGAGGATTGCATTCAGCCTAGTTCCTGGTTGCTGGCCAAAGGGATCATGGACATTG\
    AAGCATATTTTGAAAGAATTGGCTATAAGAACTCTAGGAACAAATTGGACTTGGAAACATTAACTGACATTCTTGAGCAC\
    CAGATCCGGGCTGTTCCCTTTGAGAACCTTAACATGCATTGTGGGCAAGCCATGGAGTTGGGCTTAGAGGCTATTTTTGA\
    TCACATTGTAAGAAGAAACCGGGGTGGGTGGTGTCTCCAGGTCAATCAACTTCTGTACTGGGCTCT"; // 64 lines (last line incomplete = 63)

// Second block of the genome file
const SECOND_BLOCK_GENOME: &str = 
    "GACCACAATCGGTT\
    TTCAGACCACAATGTTAGGAGGGTATTTTTACATCCCTCCAGTTAACAAATACAGCACTGGCATGGTTCACCTTCTCCTG\
    CAGGTGACCATTGACGGCAGGAATTACATTGTCGATGCTGGGTCTGGAAGCTCCTCCCAGATGTGGCAGCCTCTAGAATT\
    AATTTCTGGGAAGGATCAGCCTCAGGTGCCTTGCATTTTCTGCTTGACAGAAGAGAGAGGAATCTGGTACCTGGACCAAA\
    TCAGGAGAGAGCAGTATATTACAAACAAAGAATTTCTTAATTCTCATCTCCTGCCAAAGAAGAAACACCAAAAAATATAC\
    TTATTTACGCTTGAACCTCGAACAATTGAAGATTTTGAGTCTATGAATACATACCTGCAGACGTCTCCAACATCTTCATT\
    TATAACCACATCATTTTGTTCCTTGCAGACCCCAGAAGGGGTTTACTGTTTGGTGGGCTTCATCCTCACCTATAGAAAAT\
    TCAATTATAAAGACAATACAGATCTGGTCGAGTTTAAAACTCTCACTGAGGAAGAGGTTGAAGAAGTGCTGAGAAATATA\
    TTTAAGATTTCCTTGGGGAGAAATCTCGTGCCCAAACCTGGTGATGGATCCCTTACTATTTAGAATAAGGAACAAAATAA\
    ACCCTTGTGTATGTATCACCCAACTCACTAATTATCAACTTATGTGCTATCAGATATCCTCTCTACCCTCACGTTATTTT\
    GAAGAAAATCCTAAACATCAAATACTTTCATCCATAAAAATGTCAGCATTTATTAAAAAACAATAACTTTTTAAAGAAAC\
    ATAAGGACACATTTTCAAATTAATAAAAATAAAGGCATTTTAAGGATGGCCTGTGATTATCTTGGGAAGCAGAGTGATTC\
    ATGCTAGAAAACATTTAATATTGATTTATTGTTGAATTCATAGTAAATTTTTACTGGTAAATGAATAAAGAATATTGTGG\
    AAAAA\
    >NM_000016.6 Homo sapiens acyl-CoA dehydrogenase medium chain (ACADM), transcript variant 1, mRNA; nuclear gene for mitochondrial product\
    AGAGGAGTCCCGCGTTCGGGGAGTATGTCAAGGCCGTGACCCGTGTATTATTGTCCGAGTGGCCGGAACGGGAGCCAACA\
    TGGCAGCGGGGTTCGGGCGATGCTGCAGGGTCCTGAGAAGTATTTCTCGTTTTCATTGGAGATCACAGCATACAAAAGCC\
    AATCGACAACGTGAACCAGGATTAGGATTTAGTTTTGAGTTCACCGAACAGCAGAAAGAATTTCAAGCTACTGCTCGTAA\
    ATTTGCCAGAGAGGAAATCATCCCAGTGGCTGCAGAATATGATAAAACTGGTGAATATCCAGTCCCCCTAATTAGAAGAG\
    CCTGGGAACTTGGTTTAATGAACACACACATTCCAGAGAACTGTGGAGGTCTTGGACTTGGAACTTTTGATGCTTGTTTA\
    ATTAGTGAAGAATTGGCTTATGGATGTACAGGGGTTCAGACTGCTATTGAAGGAAATTCTTTGGGGCAAATGCCTATTAT\
    TATTGCTGGAAATGATCAACAAAAGAAGAAGTATTTGGGGAGAATGACTGAGGAGCCATTGATGTGTGCTTATTGTGTAA\
    CAGAACCTGGAGCAGGCTCTGATGTAGCTGGTATAAAGACCAAAGCAGAAAAGAAAGGAGATGAGTATATTATTAATGGT\
    CAGAAGATGTGGATAACCAACGGAGGAAAAGCTAATTGGTATTTTTTATTGGCACGTTCTGATCCAGATCCTAAAGCTCC\
    TGCTAATAAAGCCTTTACTGGATTCATTGTGGAAGCAGATACCCCAGGAATTCAGATTGGGAGAAAGGAATTAAACATGG\
    GCCAGCGATGTTCAGATACTAGAGGAATTGTCTTCGAAGATGTGAAAGTGCCTAAAGAAAATGTTTTAATTGGTGACGGA\
    GCTGGTTTCAAAGTTGCAATGGGAGCTTTTGATAAAACCAGACCTGTAGTAGCTGCTGGTGCTGTTGGATTAGCACAAAG\
    AGCTTTGGATGAAGCTACCAAGTATGCCCTGGAAAGGAAAACTTTCGGAAAGCTACTTGTAGAGCACCAAGCAATATCAT\
    TTATGCTGGCTGAAATGGCAATGAAAGTTGAACTAGCTAGAATGAGTTACCAGAGAGCAGCTTGGGAGGTTGATTCTGGT\
    CGTCGAAATACCTATTATGCTTCTATTGCAAAGGCATTTGCTGGAGATATTGCAAATCAGTTAGCTACTGATGCTGTGCA\
    GATACTTGGAGGCAATGGATTTAATACAGAATATCCTGTAGAAAAACTAATGAGGGATGCCAAAATCTATCAGATTTATG\
    AAGGTACTTCACAAATTCAAAGACTTATTGTAGCCCGTGAACACATTGACAAGTACAAAAATTAAAAAAATTACTGTAGA\
    AATATTGAATAACTAGAACACAAGCCACTGTTTCAGCTCCAGAAAAAAGAAAGGGCTTTAACGTTTTTTCCAGTGAAAAC\
    AAATCCTCTTATATTAAATCTAAGCAACTGCTTATTATAGTAGTTTATACTTTTGCTTAACTCTGTTATGTCTCTTAAGC\
    AGGTTTGGTTTTTATTAAAATGATGTGTTTTCTTTAGTACCACTTTACTTGAATTACATTAACCTAGAAAACTACATAGG\
    TTATTTTGATCTCTTAAGATTAATGTAGCAGAAATTTCTTGGAATTTTATTTTTGTAATGACAGAAAAGTGGGCTTAGAA\
    AGTATTCAAGATGTTACAAAATTTACATTTAGAAAATATTGTAGTATTTGAATACTGTCAACTTGACAGTAACTTTGTAG\
    ACTTAATGGTATTATTAAAGTTCTTTTTATTGCAGTTTGGAAAGCATTTGTGAAACTTTCTGTTTGGCACAGAAACAGTC\
    AAAATTTTGACATTCATATTCTCCTATTTTACAGCTACAAGAACTTTCTTGAAAATCTTATTTAATTCTGAGCCCATATT\
    TCACTTACCTTATTTAAAATAAATCAATAAAGCTTGCCTTAAATTATTTTTATATGACTGTTGGTCTCTAGGTAGCCTTT\
    GGTCTATTGTACACAATCTCATTTCATATGTTTGCATTTTGGCAAAGAACTTAATAAAATTGTTCAGTGCTTATTATCAT\
    ATCTTTCTGTATTTTTTCCAGGAAATTTCATTACTTCGTGTAATAGTGTATATTTCTTGTATTTACTATGATGAAAAAAG\
    GTCGTTTTAATTTTGAATTGAATAAAGTTACCTGTTCATTTTTTATTAGATATTTTAAAGACTTCAGAAAATATAAATAT\
    GAAATAATTTAAGAACCCAAA\
    >NM_000017.4 Homo sapiens acyl-CoA dehydrogenase short chain (ACADS), transcript variant 1, mRNA; nuclear gene for mitochondrial product\
    ACTCCGGAACAGCGCGCTCGCAGCGGGAGGTCGCGAAGCCTGGGACTGTGTCTGTCGCCCATGGCCGCCGCGCTGCTCGC\
    CCGGGCCTCGGGCCCTGCCCGCAGAGCTCTCTGTCCTAGGGCCTGGCGGCAGTTACACACCATCTACCAGTCTGTGGAAC\
    TGCCCGAGACACACCAGATGTTGCTCCAGACATGCCGGGACTTTGCCGAGAAGGAGTTGTTTCCCATTGCAGCCCAGGTG\
    GATAAGGAACATCTCTTCCCAGCGGCTCAGGTGAAGAAGATGGGCGGGCTTGGGCTTCTGGCCATGGACGTGCCCGAGGA\
    GCTTGGCGGTGCTGGCCTCGATTACCTGGCCTACGCCATCGCCATGGAGGAGATCAGCCGTGGCTGCGCCTCCACCGGAG\
    TCATCATGAGTGTCAACAACTCTCTCTACCTGGGGCCCATCTTGAAGTTTGGCTCCAAGGAGCAGAAGCAGGCGTGGGTC\
    ACGCCTTTCACCAGTGGTGACAAAATTGGCTGCTTTGCCCTCAGCGAACCAGGGAACGGCAGTGATGCAGGAGCTGCGTC\
    CACCACCGCCCGGGCCGAGGGCGACTCATGGGTTCTGAATGGAACCAAAGCCTGGATCACCAATGCCTGGGAGGCTTCGG\
    CTGCCGTGGTCTTTGCCAGCACGGACAGAGCCCTGCAAAACAAGGGCATCAGTGCCTTCCTGGTCCCCATGCCAACGCCT\
    GGGCTCACGTTGGGGAAGAAAGAAGACAAGCTGGGCATCCGGGGCTCATCCACGGCCAACCTCATCTTTGAGGACTGTCG\
    CATCCCCAAGGACAGCATCCTGGGGGAGCCAGGGATGGGCTTCAAGATAGCCATGCAAACCCTGGACATGGGCCGCATCG\
    GCATCGCCTCCCAGGCCCTGGGCATTGCCCAGACCGCCCTCGATTGTGCTGTGAACTACGCTGAGAATCGCATGGCCTTC\
    GGGGCGCCCCTCACCAAGCTCCAGGTCATCCAGTTCAAGTTGGCAGACATGGCCCTGGCCCTGGAGAGTGCCCGGCTGCT\
    GACCTGGCGCGCTGCCATGCTGAAGGATAACAAGAAGCCTTTCATCAAGGAGGCAGCCATGGCCAAGCTGGCCGCCTCGG\
    AGGCCGCGACCGCCATCAGCCACCAGGCCATCCAGATCCTGGGCGGCATGGGCTACGTGACAGAGATGCCGGCAGAGCGG\
    CACTACCGCGACGCCCGCATCACTGAGATCTACGAGGGCACCAGCGAAATCCAGCGGCTGGTGATCGCCGGGCATCTGCT\
    CAGGAGCTACCGGAGCTGAGCCCGCGGCGGACTGCCCCAGGACTGCGGGAAGGCGCGGGAGCCAGGGGCCTCCACCCCAA\
    CCCCGGCTCAGAGACTGGGCGGCCCGGCGGGGGCTCCCTGGGGACCCCAGATGGGCTCAGTGCTGCCACCCAGATCAGAT\
    CACATGGGAATGAGGCCCTCCGACCATTGGCAGCTCCGCCTCTGGGCCTTTCCGCCTCCTCACCACTGTGCCTCAAGTTC\
    CTCATCTAAGTGGCCCTGGCCTC"; // 65 lines (last line incomplete = 64)

// Third block of the genome file
const THIRD_GENOME_BLOCK: &str = 
    "CTGGGGGCGGGGTTGTGGGGGGGCTGAGCGACACTCAGGGACACCTCAGTTGTCCTC\
    CCGCGGGCCCTGGTGCCCTGGCATGAAGGCCCAGTGCGACAGGCCCTTGGTGGGGTCTGTCTTTTCCTTGAGGTCAGAGG\
    TCAGGAGCAGGGCTGGGGTCAGGATGACGAGGCCTGGGGTCCTGGTGTTGGGCAGGTGGTGGGGCTGGGCCATGGAGCTG\
    GCCCAGAGGCCCCTCAGCCCTTTGTAAAGTCTGATGAAGGCAGGGGTGGTGATTCATGCTGTGTGACTGACTGTGGGTAA\
    TAAACACACCTGTCCCCCA\
    >NM_000018.4 Homo sapiens acyl-CoA dehydrogenase very long chain (ACADVL), transcript variant 1, mRNA; nuclear gene for mitochondrial product\
    AGAGCTGGGTCAGAGCTCGAGCCAGCGGCGCCCGGAGAGATTCGGAGATGCAGGCGGCTCGGATGGCCGCGAGCTTGGGG\
    CGGCAGCTGCTGAGGCTCGGGGGCGGAAGCTCGCGGCTCACGGCGCTCCTGGGGCAGCCCCGGCCCGGCCCTGCCCGGCG\
    GCCCTATGCCGGGGGTGCCGCTCAGCTGGCTCTGGACAAGTCAGATTCCCACCCCTCTGACGCTCTGACCAGGAAAAAAC\
    CGGCCAAGGCGGAATCTAAGTCCTTTGCTGTGGGAATGTTCAAAGGCCAGCTCACCACAGATCAGGTGTTCCCATACCCG\
    TCCGTGCTCAACGAAGAGCAGACACAGTTTCTTAAAGAGCTGGTGGAGCCTGTGTCCCGTTTCTTCGAGGAAGTGAACGA\
    TCCCGCCAAGAATGACGCTCTGGAGATGGTGGAGGAGACCACTTGGCAGGGCCTCAAGGAGCTGGGGGCCTTTGGTCTGC\
    AAGTGCCCAGTGAGCTGGGTGGTGTGGGCCTTTGCAACACCCAGTACGCCCGTTTGGTGGAGATCGTGGGCATGCATGAC\
    CTTGGCGTGGGCATTACCCTGGGGGCCCATCAGAGCATCGGTTTCAAAGGCATCCTGCTCTTTGGCACAAAGGCCCAGAA\
    AGAAAAATACCTCCCCAAGCTGGCATCTGGGGAGACTGTGGCCGCTTTCTGTCTAACCGAGCCCTCAAGCGGGTCAGATG\
    CAGCCTCCATCCGAACCTCTGCTGTGCCCAGCCCCTGTGGAAAATACTATACCCTCAATGGAAGCAAGCTTTGGATCAGT\
    AATGGGGGCCTAGCAGACATCTTCACGGTCTTTGCCAAGACACCAGTTACAGATCCAGCCACAGGAGCCGTGAAGGAGAA\
    GATCACAGCTTTTGTGGTGGAGAGGGGCTTCGGGGGCATTACCCATGGGCCCCCTGAGAAGAAGATGGGCATCAAGGCTT\
    CAAACACAGCAGAGGTGTTCTTTGATGGAGTACGGGTGCCATCGGAGAACGTGCTGGGTGAGGTTGGGAGTGGCTTCAAG\
    GTTGCCATGCACATCCTCAACAATGGAAGGTTTGGCATGGCTGCGGCCCTGGCAGGTACCATGAGAGGCATCATTGCTAA\
    GGCGGTAGATCATGCCACTAATCGTACCCAGTTTGGGGAGAAAATTCACAACTTTGGGCTGATCCAGGAGAAGCTGGCAC\
    GGATGGTTATGCTGCAGTATGTAACTGAGTCCATGGCTTACATGGTGAGTGCTAACATGGACCAGGGAGCCACGGACTTC\
    CAGATAGAGGCCGCCATCAGCAAAATCTTTGGCTCGGAGGCAGCCTGGAAGGTGACAGATGAATGCATCCAAATCATGGG\
    GGGTATGGGCTTCATGAAGGAACCTGGAGTAGAGCGTGTGCTCCGAGATCTTCGCATCTTCCGGATCTTTGAGGGGACAA\
    ATGACATTCTTCGGCTGTTTGTGGCTCTGCAGGGCTGTATGGACAAAGGAAAGGAGCTCTCTGGGCTTGGCAGTGCTCTA\
    AAGAATCCCTTTGGGAATGCTGGCCTCCTGCTAGGAGAGGCAGGCAAACAGCTGAGGCGGCGGGCAGGGCTGGGCAGCGG\
    CCTGAGTCTCAGCGGACTTGTCCACCCGGAGTTGAGTCGGAGTGGCGAGCTGGCAGTACGGGCTCTGGAGCAGTTTGCCA\
    CTGTGGTGGAGGCCAAGCTGATAAAACACAAGAAGGGGATTGTCAATGAACAGTTTCTGCTGCAGCGGCTGGCAGACGGG\
    GCCATCGACCTCTATGCCATGGTGGTGGTTCTCTCGAGGGCCTCAAGATCCCTGAGTGAGGGCCACCCCACGGCCCAGCA\
    TGAGAAAATGCTCTGTGACACCTGGTGTATCGAGGCTGCAGCTCGGATCCGAGAGGGCATGGCCGCCCTGCAGTCTGACC\
    CCTGGCAGCAAGAGCTCTACCGCAACTTCAAAAGCATCTCCAAGGCCTTGGTGGAGCGGGGTGGTGTGGTCACCAGCAAC\
    CCACTTGGCTTCTGAATACTCCCGGCCAGGGCCTGTCCCAGTTATGTGCCTTCCCTCAAGCCAAAGCCGAAGCCCCTTTC\
    CTTAAGGCCCTGGTTTGTCCCGAAGGGGCCTAGTGTTCCCAGCACTGTGCCTGCTCTCAAGAGCACTTACTGCCTCGCAA\
    ATAATAAAAATTTCTAGCCAGTCA\
    >NM_000019.4 Homo sapiens acetyl-CoA acetyltransferase 1 (ACAT1), transcript variant 2, mRNA; nuclear gene for mitochondrial product\
    AGTCTACGCCTGTGGAGCCGATACTCAGCCCTCTGCGACCATGGCTGTGCTGGCGGCACTTCTGCGCAGCGGCGCCCGCA\
    GCCGCAGCCCCCTGCTCCGGAGGCTGGTGCAGGAAATAAGATATGTGGAACGGAGTTATGTATCAAAACCCACTTTGAAG\
    GAAGTGGTCATAGTAAGTGCTACAAGAACACCCATTGGATCTTTTTTAGGCAGCCTTTCCTTGCTGCCAGCCACTAAGCT\
    TGGTTCCATTGCAATTCAGGGAGCCATTGAAAAGGCAGGGATTCCAAAAGAAGAAGTGAAAGAAGCATACATGGGTAATG\
    TTCTACAAGGAGGTGAAGGACAAGCTCCTACAAGGCAGGCAGTATTGGGTGCAGGCTTACCTATTTCTACTCCATGTACC\
    ACCATAAACAAAGTTTGTGCTTCAGGAATGAAAGCCATCATGATGGCCTCTCAAAGTCTTATGTGTGGACATCAGGATGT\
    GATGGTGGCAGGTGGGATGGAGAGCATGTCCAATGTTCCATATGTAATGAACAGAGGATCAACACCATATGGTGGGGTAA\
    AGCTTGAAGATTTGATTGTAAAAGACGGGCTAACTGATGTCTACAATAAAATTCATATGGGCAGCTGTGCTGAGAATACA\
    GCAAAGAAGCTGAATATTGCACGAAATGAACAGGACGCTTATGCTATTAATTCTTATACCAGAAGTAAAGCAGCATGGGA\
    AGCTGGGAAATTTGGAAATGAAGTTATTCCTGTCACAGTTACAGTAAAAGGTCAACCAGATGTAGTGGTGAAAGAAGATG\
    AAGAATATAAACGTGTTGATTTTAGCAAAGTTCCAAAGCTGAAGACAGTTTTCCAGAAAGAAAATGGCACAGTAACAGCT\
    GCCAATGCCAGTACACTGAATGATGGAGCAGCTGCTCTGGTTCTCATGACGGCAGATGCAGCGAAGAGGCTCAATGTTAC\
    ACCACTGGCAAGAATAGTAGCATTTGCTGACGCTGCTGTAGAACCTATTGATTTTCCAATTGCTCCTGTATATGCTGCAT\
    CTATGGTTCTTAAAGATGTGGGATTGAAAAAAGAAGATATTGCAATGTGGGAAGTAAATGAAGCCTTTAGTCTGGTTGTA\
    CTAGCAAACATTAAAATGTTGGAGATTGATCCCCAAAAAGTGAATATCAATGGAGGAGCTGTTTCTCTGGGACATCCAAT\
    TGGGATGTCTGGAGCCAGGATTGTTGGTCATTTGACTCATGCCTTGAAGCAAGGAGAATACGGTCTTGCCAGTATTTGCA\
    ATGGAGGAGGAGGTGCTTCTGCCATGCTAATTCAGAAGCTGTAGACAACCTCTGCTATTTAAGGAGACAACCCTATGTGA\
    CCAGAAGGCCTGCTGTAATCAGTGTGACTACTGTGGGTCAGCTTATATTCAGATAAGCTGTTTCATTTTTTATTATTTTC\
    TATGTTAACTTTTAAAAATCAAAATGATGAAATCCCAAAACATTTTGAAATTAAAAATAAATTTCTTCTTCTGCTTTTTT\
    CTTGGTAACCTTGAAAA\
    >NM_000020.3 Homo sapiens activin A receptor like type 1 (ACVRL1), transcript variant 1, mRNA\
    CCCAGTCCCGGGAGGCTGCCGCGCCAGCTGCGCCGAGCGAGCCCCTCCCCGGCTCCAGCCCGGTCCGGGGCCGCGCCCGG\
    ACCCCAGCCCGCCGTCCAGCGCTGGCGGTGCAACTGCGGCCGCGCGGTGGAGGGGAGGTGGCCCCGGTCCGCCGAAGGCT\
    AGCGCCCCGCCACCCGCAGAGCGGGCCCAGAGGGACCATGACCTTGGGCTCCCCCAGGAAAGGCCTTCTGATGCTGCTGA\
    TGGCCTTGGTGACCCAGGGAGACCCTGTGAAGCCGTCTCGGGGCCCGCTGGTGACCTGCACGTGTGAGAGCCCACATTGC\
    AAGGGGCCTACCTGCCGGGGGGCCTGGTGCACAGTAGTGCTGGTGCGGGAGGAGGGGAGGCACCCCCAGGAACATCGGGG\
    CTGCGGGAACTTGCACAGGGAGCTCTGCAGGGGGCGCCCCACCGAGTTCGTCAACCACTACTGCTGCGACAGCCACCTCT\
    GCAACCACAACGTGTCCCTGGTGCTGGAGGCCACCCAACCTCCTTCGGAGCAGCCGGGAACAGATGGCCAGCTGGCCCTG\
    ATCCTGGGCCCCGTGCTGGCCTTGCTGGCCCTGGTGGCCCTGGGTGTCCTGGGCCTGTGGCATGTCCGACGGAGGCAGGA\
    GAAGCAGCGTGGC"; // 65 lines (last line incomplete = 64)